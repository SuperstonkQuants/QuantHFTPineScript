//@version=4
strategy(title="LaTriple-X 30m BTCUSD (by Tathal)", shorttitle="LTXBTC30", format=format.price, precision=2, default_qty_type=strategy.percent_of_equity, default_qty_value=100, overlay=true)

startDate = input(title="Start Date", type=input.integer,
     defval=1, minval=1, maxval=31)
startMonth = input(title="Start Month", type=input.integer,
     defval=1, minval=1, maxval=12)
startYear = input(title="Start Year", type=input.integer,
     defval=2020, minval=1800, maxval=2100)

endDate = input(title="End Date", type=input.integer,
     defval=1, minval=1, maxval=31)
endMonth = input(title="End Month", type=input.integer,
     defval=1, minval=1, maxval=12)
endYear = input(title="End Year", type=input.integer,
     defval=2030, minval=1800, maxval=2100)

// STEP 2:
// Look if the close time of the current bar
// falls inside the date range
inDateRange = (time >= timestamp(syminfo.timezone, startYear,
         startMonth, startDate, 0, 0)) and
     (time < timestamp(syminfo.timezone, endYear, endMonth, endDate, 0, 0))


normalize(_src, _min, _max) =>
    // Normalizes series with unknown min/max using historical min/max.
    // _src      : series to rescale.
    // _min, _min: min/max values of rescaled series.
    var _historicMin =  10e10
    var _historicMax = -10e10
    _historicMin := min(nz(_src, _historicMin), _historicMin)
    _historicMax := max(nz(_src, _historicMax), _historicMax)
    _min + (_max - _min) * (_src - _historicMin) / max(_historicMax - _historicMin, 10e-10)

Length = input(1, minval=1, title="t3 Average length")
xPrice = close
xe1 = ema(xPrice, Length)
xe2 = ema(xe1, Length)
xe3 = ema(xe2, Length)
xe4 = ema(xe3, Length)
xe5 = ema(xe4, Length)
xe6 = ema(xe5, Length)
b = 0.7
c1 = -b*b*b
c2 = 3*b*b+3*b*b*b
c3 = -6*b*b-3*b-3*b*b*b
c4 = 1+3*b+b*b*b+3*b*b
T3Average = c1 * xe6 + c2 * xe5 + c3 * xe4 + c4 * xe3

t30d = security(syminfo.tickerid, input("1", title="t30d length"), T3Average)
t1a = security(syminfo.tickerid, 'D', T3Average)
t3return = false
t3def = if high > t30d
    t3return := true
t3defplot = if high > t30d
    true
else
    false

period1 = input(1, minval=1, title="DI+ Length")
period2 = input(144, minval=1, title="DI- Length")
up = change(high)
down = -change(low)
plusDM = na(up) ? na : (up > down and up > 0 ? up : 0)
minusDM = na(down) ? na : (down > up and down > 0 ? down : 0)
trur = rma(tr, period1)
trur2 = rma(tr, period2)
plus = fixnan(100 * rma(plusDM, period1) / trur)
minus = fixnan(100 * rma(minusDM, period2) / trur2)
sum = plus + minus

src = input(title="Source", defval=close)
alpha = 0
gamma=1-alpha

L0 = 0.0
L0 := (1-gamma) * src + gamma * nz(L0[1])
L1 = 0.0
L1 := -gamma * L0 + nz(L0[1]) + gamma * nz(L1[1])

L2 = 0.0
L2 := -gamma * L1 + nz(L1[1]) + gamma * nz(L2[1])

L3 = 0.0
L3 := -gamma * L2 + nz(L2[1]) + gamma * nz(L3[1])

cu= (L0>L1 ? L0-L1 : 0) + (L1>L2 ? L1-L2 : 0) + (L2>L3 ? L2-L3 : 0)

cd= (L0<L1 ? L1-L0 : 0) + (L1<L2 ? L2-L1 : 0) + (L2<L3 ? L3-L2 : 0)

temp= cu+cd==0 ? -1 : cu+cd
LaRSI=temp==-1 ? 0 : cu/temp

length = input(1, minval=1, title="LaRSI Length")
upColor = input(color.red, "Up Color")
dnColor = input(color.green, "Down Color")
f_normGradientColor(_series, _crossesZero, _colorNormLen, _dnColor, _upColor) =>
    _dnValue = _crossesZero?-100:0
    _mult = 0.0
    _lowest = lowest(_colorNormLen)
    _highest = highest(_colorNormLen)
    _diff1 = close - _lowest
    _diff2 = _highest - _lowest
    if _diff2 > 0
        _mult := _diff1 / _diff2 * 100
    color.from_gradient(sign(_series) * _mult, _dnValue, 100, _dnColor, _upColor)
out = 10000 * change(ema(ema(ema(log(close), length), length), length))


t30dema = ema(t30d, input(1, title="T30D EMA Smoothing"))
larsisema = ema(normalize(LaRSI, close * (input(0.99, title="Minimum Bound LaRSI")), close * (input(1.01, title="Maximum Bound LaRSI"))),input(1, title="LaRSI EMA Length"))
sumema = ema(normalize(sum, close * (input(0.99, title="Minimum Bound sum")), close * (input(1.01, title="Maximum Bound sum"))),input(1, title="sum EMA Length"))
outema = ema(normalize(out, close * (input(0.99, title="Minimum Bound out")), close * (input(1.01, title="Maximum Bound out"))),input(1, title="out EMA Length"))
outhigher= ema(normalize(out, close * (input(0.99, title="Minimum Bound out higher")), close * (input(1.01, title="Maximum Bound out higher"))),input(5, title="out EMA Length higher"))
outlower = ema(normalize(out, close * (input(0.99, title="Minimum Bound out lower")), close * (input(1.01, title="Maximum Bound out lower"))),input(4, title="out EMA Length lower"))

long1 = crossover(outhigher, outlower)
long2 = plus > minus
long3 = crossunder(close, normalize(outhigher, close * (input(0.99, title="Minimum Bound Out D")), close * (input(1.01, title="Maximum Bound Out D"))))
long5 = crossunder(close, larsisema)
long4 = crossunder(close, min(t30dema, sma(high, input(2, title="high EMA Length"))))
long6 = crossover(close, sumema)
long7 = crossover(low, outema)
long = long1 and (long2 or t3return or long3 or long4 or long5 or long6 or long7)


short1 = crossunder(outhigher, outlower)
short2 = crossover(close, max(outlower, t30d))
short3 = crossunder(high, normalize(sum, close * 0.95, close * 1.05))
short = short1 or short2 or short3
cancel = short == true or (plus < minus) and (LaRSI > input(53, minval=0))

if (inDateRange)
    strategy.entry("long", true, when = long)
if (inDateRange)   
    strategy.entry("short", false, when = short)


stopPer = input(-1.0, title='Stop Loss %', type=input.float) / 100
takePer = input(5.0, title='Take Profit %', type=input.float) / 100

// Determine where you've entered and in what direction
longStop = strategy.position_avg_price * (1 - stopPer)
shortStop = strategy.position_avg_price * (1 - stopPer)
longTake = strategy.position_avg_price * (1 + takePer)

if strategy.position_size > 0 and cancel == true
    strategy.exit(id="Close Long", stop=longStop, limit=longTake)
    
if strategy.position_size < 0 
    strategy.exit(id="Close Short", stop=shortStop)
